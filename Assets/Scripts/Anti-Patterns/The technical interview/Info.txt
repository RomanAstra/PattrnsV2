Техническое интервью
«Я выбираю ленивого человека для тяжелой работы. Потому что ленивый человек найдет легкий способ сделать это».
-Билл Гейтс
Что это?
Концепция технического интервью в процессе найма программиста может не звучать как анти-паттерн в
само по себе, но я предлагаю, и это имеет побочные эффекты в качестве исходного кода, созданного командой. За
тех, кто никогда не проходил техническое собеседование с программистом, оно включает серию тестов, которые даются
кандидат подтвердить свои навыки и знания. Экзамены могут включать написание ответов о программировании на
доска, листок бумаги или тестовая среда. Я считаю техническое интервью общеотраслевым
анти-модель.
Почему это не так?
Основная проблема процесса технического интервью заключается в том, что вы можете проверить только то, что вы уже знаете. Таким образом, вы будете
заканчивайте тем, что завербовали кандидатов, которые являются зеркальным отражением себя В результате вы получите команду, которой не хватает
ряд различных навыков. Этот подход действителен, если ваша единственная цель - иметь очень специализированную команду, но это редко
дело. Большинство компаний должны иметь сотрудников с различными наборами навыков, чтобы уравновесить любые недостатки в
организация.
Например, если предмет вашего технического интервью вращается вокруг структур данных, потому что это ваша
Как сильная сторона интервьюера, в конечном итоге вы можете исключить кандидатов, которые слабее в этой области, но сильнее в
другие области, такие как шаблоны проектирования. Но поскольку вы оцениваете только то, что считаете важным
по техническим причинам вы можете пропустить наем кандидатов, которые могли бы привнести новые навыки в вашу команду.
В чем причина?
Основная причина, по которой процесс найма программистов так непоследователен в нашей отрасли, состоит в том, что мало кто
понять, что делают программисты и как оценивать их как кандидатов. Итак, менеджеры по найму предпочитают судить
заявителей по их итоговым техническим баллам, тем самым уменьшая ценность кандидата до единого числа.
Существуют также некоторые типы моделей поведения или процессов интервьюера, которые также могут быть частью основной причины:
• Риддлер: Риддлер - это интервьюер, который хочет проверить навыки кандидата, задавая вопросы в
Форма умных головоломок. Такой подход часто приводит к путанице с большинством кандидатов и переворачивает интервью
процесс в стрессовой игре.
• Горячее место: печально известный тип собеседования с горячим местом похож на допрос в полиции с целью
Выявление слабых и сильных сторон кандидата с помощью быстрой последовательности вопросов. Часто один интервьюер
возьмет на себя роль плохого полицейского, будучи более агрессивным в их допросе, в то время как другой играет хорошего
полицейский, чтобы помочь кандидату, если они возьмут слишком много времени, чтобы ответить на некоторые вопросы. Этот подход в конечном итоге сгорает
кандидат или принуждение их ответить так, как они думают, это то, что интервьюеры хотят услышать. Это
не подходящий способ узнать о потенциале кандидата.
• Доска: интервью на доске состоит из того, что кандидат отвечает на технические вопросы
писать свой ответ на доске. Есть особая проблема с этим методом оценки кандидатов;
большинство программистов никогда не пишут код на бумаге или досках в течение своей карьеры, поэтому, когда их заставляют
во время стрессовой ситуации, такой как собеседование, приведет к множеству ложных негативов об их реальном мастерстве
уровень.
Как этого избежать?
Почти все согласны с тем, что наем хороших программистов является дорогостоящим и сложным процессом, но это означает, что вы
нужно быть более креативным в подходе к техническим собеседованиям, чтобы вы не отказались от превосходного
кандидаты в тех, кто просто клоны того, кто у вас уже есть в вашей команде.
Вот несколько советов, которые помогут вам избежать этого анти-паттерна:
• Попытайтесь увидеть, что уникально и ценно в кандидате. Найдите кандидата, который сможет научить вас и вашу команду
что-то новое.
• Не проверяйте слабости. Вместо этого попытайтесь понять сильные стороны кандидата и посмотреть, сбалансированы ли они.
с их потенциальными слабостями.
• Всегда принимайте во внимание тот факт, что программист может
отрасль в зависимости от их специализации. Например, средний веб-разработчик может быть не так силен в
математика как 3D-программист, но они могут лучше справляться с нормализацией баз данных или проектированием клиент-сервер
Приложения.
• Когда кандидат не отвечает на технический вопрос, спросите себя, не потому ли
понять это, может не иметь навыков, чтобы сделать это, или может быть слишком нервным из-за процесса обследования.
Другими словами, важен контекст интервью, а не только итоговая оценка, при оценке фактического
уровень квалификации заявителя.
Даже если вы очень опытный профессиональный программист, вы никогда не должны недооценивать потенциальные трудности
современного технического процесса интервью. Ваш многолетний опыт