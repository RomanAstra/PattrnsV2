Преждевременная оптимизация
«Совершенство достигается медленными степенями; это требует времени».
- Вольтер
Что это?
Преждевременная оптимизация - это процесс оптимизации и совершенствования вашего кода до того, как он понадобится, и, как следствие, потеря
драгоценное время производства.
Почему это не так?
Тратить больше времени, чем необходимо на оптимизацию, - один из худших способов тратить время и время
работодатель. Большинство устройств становятся быстрее с каждым годом, и, следовательно, программисты меньше нуждаются в оптимизации своего кода
работать быстрее на ограниченном оборудовании.
В чем причина?
Отсутствие опыта обычно является основной причиной.
Как этого избежать?
Всегда профилируйте свой код перед его оптимизацией. Для тех, кто может не знать, профилирование является актом использования диагностики
инструменты, которые помогут вам проанализировать производительность вашей системы. Часто вы обнаружите, что узкие места производительности
в вашем коде ограничены определенными областями в вашем исходном коде, поэтому, сосредоточившись на них, вы можете набрать скорость без
необходимость рефакторинга всей вашей кодовой базы.
Как хороший механик, программист должен иметь набор инструментов, который поможет им работать быстрее и
лучше


--------------------------------------------------------------
Что это

Оптимизация, проводимая до того, как у вас есть вся информация, необходимая для принятия взвешенных решений по поводу того, где и как нужно её проводить.

Почему плохо

На практике сложно предсказать, где встретится узкое место. Попытки навести оптимизацию до получения эмпирических результатов приведут к усложнению кода и появлению ошибок, а пользы не принесут.

Как избежать

Сначала пишите чистый, читаемый, работающий код, используя известные и проверенные алгоритмы и инструменты. При необходимости используйте инструменты для профилирования для поиска узких мест. Полагайтесь на измерения, а не на догадки и предположения.

Примеры и признаки

Кэширование до того, как провели профилирование. Использование сложных и недоказанных эвристических правил вместо математически верных алгоритмов. Выбор новых, непротестированных фреймворков, которые могут повести себя плохо под нагрузкой.

В чём сложность

Сложность в том, чтобы знать, когда оптимизация будет преждевременной. Важно заранее оставлять место для роста. Нужно выбирать решения и платформы, которые позволят легко оптимизировать и расти. Также иногда можно использовать преждевременную оптимизацию в качестве оправдания за плохой код. Например, использование алгоритма O(n2) просто потому, что алгоритм O(n) сложнее.

Слишком длинно, не читал

Сначала профилирование, потом оптимизация. Не меняйте простоту на эффективность, пока об этом не заявят эмпирически полученные данные.