Слишком много менеджеров
«У нас не так много менеджеров, как хотелось бы, но у нас было бы слишком мало, чем слишком много».
- Ларри Пейдж
Что это?
Менеджеры великолепны; они предлагают уникальный интерфейс для пула сложных подсистем. Потому что видеоигры
обширная коллекция систем, которые постоянно взаимодействуют друг с другом, имея менеджеров в качестве интерфейсов
очень полезно в уменьшении зависимостей.
Почему это не так?
Если каждый класс является менеджером, вы в конечном итоге зависите от других менеджеров. Другими словами, менеджеры
стать подсистемами других менеджеров, пока вы не окажетесь в той же ситуации, которую вы пытались избежать,
спагетти зависимостей. Еще одним негативным моментом является то, что менеджеры часто реализуются как одиночные, что означает
что у вас есть глобальные зависимости, разбросанные по всей базе кода.
Ниже приведен пример кода, демонстрирующий возможную архитектуру программного обеспечения, которая слишком зависит от Manager.
классы. Если вы видите что-то похожее в исходном коде, вам может потребоваться рефакторинг вашей архитектуры:
using UnityEngine;
public class GameManager : MonoBehaviour
{
 private Player m_Player;
 void Start()
 {
 // Получить идентификатор игрока
 m_Player = PlayerManager.Instance.GetPlayer ();

 // Вход в онлайн-сервисы
 OnlineManager.Instance.LoginPlayer (m_Player);
 // Загрузка сохраненных игровых данных игрока
 SaveManager.Instance.LoadSaveGame (m_Player);
 // Загружаем предпочитаемую плеером конфигурацию контроллера
 IInputConfiguration inputConfig = SaveManager.Instance.GetInputConfig (m_Player);
 InputManager.Instance.LoadControllerConfig (inputConfig);
 }
}
В чем причина?
Основной причиной обычно являются неопытные или ленивые программисты, которые не учитывают общую архитектуру своего кода.
база, но вместо этого сосредоточиться на мгновенных результатах.
Как этого избежать?
Вот список хороших привычек, которые могут помочь вам избежать этого анти-паттерна:
• Каждый раз, когда вы собираетесь использовать определенный шаблон, всегда рассматривайте возможность использования альтернативы, которая может быть более
подходящее. Другими словами, избегайте по умолчанию самого простого решения.
• Следите за своей архитектурой и шаблонами, которые вы используете. Поднимите флаг, если вы видите слишком много классов
с менеджером в их названии.
• Если у вас возникли проблемы с внедрением модульных тестов для ваших основных систем, это хороший признак того, что
что-то не так в вашей архитектуре, и это может быть связано с слишком большим количеством синглетонов или классов, которые действуют
как глобальные менеджеры.
Новые паттерны, или перестановки устоявшихся, появляются регулярно. Это хорошая практика, чтобы следить за
их, читая новые книги по теме.